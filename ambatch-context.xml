<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <context:annotation-config />
    
    <bean class="org.opentripplanner.analyst.request.SampleFactory">
	    <property name="searchRadiusM" value="200" />
    </bean>
    <bean class="org.opentripplanner.routing.impl.DefaultRemainingWeightHeuristicFactoryImpl"/>
    <bean class="org.opentripplanner.routing.algorithm.GenericAStar"/>
    <bean class="org.opentripplanner.analyst.core.GeometryIndex" />
    
    <!-- specify a GraphService, configuring the path to the serialized Graphs -->
    
    <bean id="graphService" class="org.opentripplanner.routing.impl.GraphServiceImpl">
        <property name="path" value="/home/dsekora/graph-bundle/" />
        <!-- <property name="defaultRouterId" value="chicago" /> -->
    </bean>

 
<!-- load the origin population from a comma-separated flat text file -->

	<bean id="origins" class="org.opentripplanner.analyst.batch.CSVPopulation">
        <property name="sourceFilename" value="/home/dsekora/BatchAnalyst/Input/origins.csv" />
        <property name="labelCol" value="0" />
        <property name="latCol" value="1" />
        <property name="lonCol" value="2" />
        <property name="inputCol" value="3" />       
        <!-- do not include origins who are NaN, Inf, negative, or outside the transit coverage area -->
        <property name="filterChain">
        	<list>
        		<bean class="org.opentripplanner.analyst.batch.NanInfFilter" />
        		<bean class="org.opentripplanner.analyst.batch.InputClampFilter" />
        		<bean class="org.opentripplanner.analyst.batch.GraphGeographicFilter">
			        <property name="useOnlyStops" value="true" />
			        <property name="bufferMeters" value="2000" />
        		</bean>
        	</list>
        </property>        
	</bean>

<!-- create an origin population arranged on a regular grid that can be saved as an image
        <bean id="origins" class="org.opentripplanner.analyst.batch.SyntheticRasterPopulation">
        <property name="left" value="-87.98" />
        <property name="right" value="-87.52" />
        <property name="bottom" value="41.60" />
        <property name="top" value="42.10" />         
        <property name="crsCode" value="epsg:4326" />
        <property name="cols" value="5" />
        <property name="rows" value="5" />        
	</bean>
-->

<!--Destinations CSV -->
<!-- load the destination population from a comma-separated flat text file 
        <bean id="destinations" class="org.opentripplanner.analyst.batch.CSVPopulation">
        <property name="sourceFilename" value="/home/dsekora/BatchAnalyst/Input/destination.csv" />        
        <property name="labelCol" value="0" />
        <property name="latCol" value="1" />
        <property name="lonCol" value="2" />
        <property name="inputCol" value="3" />       
        < do not include destinations who are NaN, Inf, negative, or outside the transit coverage area >
        <property name="filterChain">
        	<list>
        		<bean class="org.opentripplanner.analyst.batch.NanInfFilter" />
        		<bean class="org.opentripplanner.analyst.batch.InputClampFilter" />
        		<bean class="org.opentripplanner.analyst.batch.GraphGeographicFilter">
			        <property name="useOnlyStops" value="true" />
			        <property name="bufferMeters" value="2000" />
        		</bean>
        	</list>
        </property>        
	</bean>	
-->

<!-- create a destination population arranged on a regular grid that can be saved as an image -->
        <bean id="destinations" class="org.opentripplanner.analyst.batch.SyntheticRasterPopulation">
        <property name="left" value="-87.98" />
        <property name="right" value="-87.52" />
        <property name="bottom" value="41.60" />
        <property name="top" value="42.10" />        
        <property name="crsCode" value="epsg:4326" />
        <property name="cols" value="460" />
        <property name="rows" value="500" />        
	</bean>

<!-- define the main batch processor, which will build one shortest path tree from each origin to all destinations -->
	
	<bean id="batchProcessor" class="org.opentripplanner.analyst.batch.BatchProcessor"> 
        <property name="outputPath" value="/home/dsekora/BatchAnalyst/Output/outAccumulatordifftest.tiff" />
        <property name="date" value="2013-07-12" />
        <property name="time" value="2:00 AM" />
        <property name="timeZone" value="America/Chicago" />
		<!-- store aggregate results back to origins
        <property name="aggregator"> 
            <bean class="org.opentripplanner.analyst.batch.aggregator.ThresholdSumAggregator">
                <property name="threshold" value="3600" />
            </bean>
        </property> 
        -->
		<!-- accumulate origin input values into reachable destinations -->
        
        <property name="accumulator"> 
            <bean class="org.opentripplanner.analyst.batch.ThresholdAccumulator">
                <property name="thresholdSeconds" value="3600" />
            </bean>
        </property> 
        
	</bean>

	<bean id="prototypeRoutingRequest" class="org.opentripplanner.routing.core.RoutingRequest">
		<!-- Set default routing parameters here -->
            <!-- <property name="routerId" value="chicago" /> -->
            <property name="maxWalkDistance" value="2000" />
            <property name="clampInitialWait" value="1800" />
            <property name="arriveBy" value="false" />
            <property name="modes" value="WALK,TRANSIT" />
	</bean>

</beans>
